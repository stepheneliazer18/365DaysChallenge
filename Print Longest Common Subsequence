vector<int> longestCommonSubsequence(vector<int> text1, vector<int> text2) {
    int m = text1.size();
    int n = text2.size();
    vector<vector<int>> dp(m+1,vector<int>(n+1));
    vector<int> ans;

    for(int i=0;i<m+1;i++) dp[i][0] = 0;
    for(int i=0;i<n+1;i++) dp[0][i] = 0;

    for(int i=1;i<m+1;i++){
        for(int j=1;j<n+1;j++){
            if(text1[i-1]==text2[j-1]){
                dp[i][j] = dp[i-1][j-1]+1;
            }
            else dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
        }
    }
    int i=m,j=n;
    while(i>0 && j>0){
        if(text1[i-1]==text2[j-1]){
            ans.push_back(text1[i-1]);
            i--;j--;
        }
        else{
            if(dp[i][j-1]>dp[i-1][j]) j--;
            else i--;
        }
    }
    reverse(ans.begin(),ans.end());
    return ans;
}
